#include <Arduino.h>
#include <Wire.h>
#include "RP2040_PWM.h"
#include <Temperature_LM75_Derived.h>

#define BOARDID "red-70-single-long"
#define N_PWM_PINS 7
#define FREQUENCY 10000
#define STATUS_PIN 7
uint8_t pwm_pins[] = {0,1,2, 3, 4, 5, 6};
RP2040_PWM* PWM_Instance[N_PWM_PINS];

// The Generic_LM75 class will provide 9-bit (±0.5°C) temperature for any
// LM75-derived sensor. More specific classes may provide better resolution.
Generic_LM75* temperature_sensors[7];

double read_channel_current(uint8_t channel, unsigned long count);

struct Action
{
  uint32_t time;
  uint8_t channel;
  uint8_t intensity;
};

unsigned long long start_time;

bool status_pin = false;
bool heat_disabled = false;

uint16_t current_action = 0;

struct Action actions_sweep[] = {
    {10, 0, 0},
    {10, 0, 1},
    {10, 0, 2},
    {10, 0, 3},
    {10, 0, 4},
    {10, 0, 5},
    {10, 0, 6},
    {10, 0, 7},
    {10, 0, 8},
    {10, 0, 9},
    {10, 0, 10},
    {10, 0, 11},
    {10, 0, 12},
    {10, 0, 13},
    {10, 0, 14},
    {10, 0, 15},
    {10, 0, 16},
    {10, 0, 17},
    {10, 0, 18},
    {10, 0, 19},
    {10, 0, 20},
    {10, 0, 21},
    {10, 0, 22},
    {10, 0, 23},
    {10, 0, 24},
    {10, 0, 25},
    {10, 0, 26},
    {10, 0, 27},
    {10, 0, 28},
    {10, 0, 29},
    {10, 0, 30},
    {10, 0, 31},
    {10, 0, 32},
    {10, 0, 33},
    {10, 0, 34},
    {10, 0, 35},
    {10, 0, 36},
    {10, 0, 37},
    {10, 0, 38},
    {10, 0, 39},
    {10, 0, 40},
    {10, 0, 41},
    {10, 0, 42},
    {10, 0, 43},
    {10, 0, 44},
    {10, 0, 45},
    {10, 0, 46},
    {10, 0, 47},
    {10, 0, 48},
    {10, 0, 49},
    {10, 0, 50},
    {10, 0, 51},
    {10, 0, 52},
    {10, 0, 53},
    {10, 0, 54},
    {10, 0, 55},
    {10, 0, 56},
    {10, 0, 57},
    {10, 0, 58},
    {10, 0, 59},
    {10, 0, 60},
    {10, 0, 61},
    {10, 0, 62},
    {10, 0, 63},
    {10, 0, 64},
    {10, 0, 65},
    {10, 0, 66},
    {10, 0, 67},
    {10, 0, 68},
    {10, 0, 69},
    {10, 0, 70},
    {10, 0, 71},
    {10, 0, 72},
    {10, 0, 73},
    {10, 0, 74},
    {10, 0, 75},
    {10, 0, 76},
    {10, 0, 77},
    {10, 0, 78},
    {10, 0, 79},
    {10, 0, 80},
    {10, 0, 81},
    {10, 0, 82},
    {10, 0, 83},
    {10, 0, 84},
    {10, 0, 85},
    {10, 0, 86},
    {10, 0, 87},
    {10, 0, 88},
    {10, 0, 89},
    {10, 0, 90},
    {10, 0, 91},
    {10, 0, 92},
    {10, 0, 93},
    {10, 0, 94},
    {10, 0, 95},
    {10, 0, 96},
    {10, 0, 97},
    {10, 0, 98},
    {10, 0, 99},
    {10, 0, 0},
    {15, 1, 0},
    {15, 1, 1},
    {15, 1, 2},
    {15, 1, 3},
    {15, 1, 4},
    {15, 1, 5},
    {15, 1, 6},
    {15, 1, 7},
    {15, 1, 8},
    {15, 1, 9},
    {15, 1, 10},
    {15, 1, 11},
    {15, 1, 12},
    {15, 1, 13},
    {15, 1, 14},
    {15, 1, 15},
    {15, 1, 16},
    {15, 1, 17},
    {15, 1, 18},
    {15, 1, 19},
    {15, 1, 20},
    {15, 1, 21},
    {15, 1, 22},
    {15, 1, 23},
    {15, 1, 24},
    {15, 1, 25},
    {15, 1, 26},
    {15, 1, 27},
    {15, 1, 28},
    {15, 1, 29},
    {15, 1, 30},
    {15, 1, 31},
    {15, 1, 32},
    {15, 1, 33},
    {15, 1, 34},
    {15, 1, 35},
    {15, 1, 36},
    {15, 1, 37},
    {15, 1, 38},
    {15, 1, 39},
    {15, 1, 40},
    {15, 1, 41},
    {15, 1, 42},
    {15, 1, 43},
    {15, 1, 44},
    {15, 1, 45},
    {15, 1, 46},
    {15, 1, 47},
    {15, 1, 48},
    {15, 1, 49},
    {15, 1, 50},
    {15, 1, 51},
    {15, 1, 52},
    {15, 1, 53},
    {15, 1, 54},
    {15, 1, 55},
    {15, 1, 56},
    {15, 1, 57},
    {15, 1, 58},
    {15, 1, 59},
    {15, 1, 60},
    {15, 1, 61},
    {15, 1, 62},
    {15, 1, 63},
    {15, 1, 64},
    {15, 1, 65},
    {15, 1, 66},
    {15, 1, 67},
    {15, 1, 68},
    {15, 1, 69},
    {15, 1, 70},
    {15, 1, 71},
    {15, 1, 72},
    {15, 1, 73},
    {15, 1, 74},
    {15, 1, 75},
    {15, 1, 76},
    {15, 1, 77},
    {15, 1, 78},
    {15, 1, 79},
    {15, 1, 80},
    {15, 1, 81},
    {15, 1, 82},
    {15, 1, 83},
    {15, 1, 84},
    {15, 1, 85},
    {15, 1, 86},
    {15, 1, 87},
    {15, 1, 88},
    {15, 1, 89},
    {15, 1, 90},
    {15, 1, 91},
    {15, 1, 92},
    {15, 1, 93},
    {15, 1, 94},
    {15, 1, 95},
    {15, 1, 96},
    {15, 1, 97},
    {15, 1, 98},
    {15, 1, 99},
    {15, 1, 0},
    {20, 2, 0},
    {20, 2, 1},
    {20, 2, 2},
    {20, 2, 3},
    {20, 2, 4},
    {20, 2, 5},
    {20, 2, 6},
    {20, 2, 7},
    {20, 2, 8},
    {20, 2, 9},
    {20, 2, 10},
    {20, 2, 11},
    {20, 2, 12},
    {20, 2, 13},
    {20, 2, 14},
    {20, 2, 15},
    {20, 2, 16},
    {20, 2, 17},
    {20, 2, 18},
    {20, 2, 19},
    {20, 2, 20},
    {20, 2, 21},
    {20, 2, 22},
    {20, 2, 23},
    {20, 2, 24},
    {20, 2, 25},
    {20, 2, 26},
    {20, 2, 27},
    {20, 2, 28},
    {20, 2, 29},
    {20, 2, 30},
    {20, 2, 31},
    {20, 2, 32},
    {20, 2, 33},
    {20, 2, 34},
    {20, 2, 35},
    {20, 2, 36},
    {20, 2, 37},
    {20, 2, 38},
    {20, 2, 39},
    {20, 2, 40},
    {20, 2, 41},
    {20, 2, 42},
    {20, 2, 43},
    {20, 2, 44},
    {20, 2, 45},
    {20, 2, 46},
    {20, 2, 47},
    {20, 2, 48},
    {20, 2, 49},
    {20, 2, 50},
    {20, 2, 51},
    {20, 2, 52},
    {20, 2, 53},
    {20, 2, 54},
    {20, 2, 55},
    {20, 2, 56},
    {20, 2, 57},
    {20, 2, 58},
    {20, 2, 59},
    {20, 2, 60},
    {20, 2, 61},
    {20, 2, 62},
    {20, 2, 63},
    {20, 2, 64},
    {20, 2, 65},
    {20, 2, 66},
    {20, 2, 67},
    {20, 2, 68},
    {20, 2, 69},
    {20, 2, 70},
    {20, 2, 71},
    {20, 2, 72},
    {20, 2, 73},
    {20, 2, 74},
    {20, 2, 75},
    {20, 2, 76},
    {20, 2, 77},
    {20, 2, 78},
    {20, 2, 79},
    {20, 2, 80},
    {20, 2, 81},
    {20, 2, 82},
    {20, 2, 83},
    {20, 2, 84},
    {20, 2, 85},
    {20, 2, 86},
    {20, 2, 87},
    {20, 2, 88},
    {20, 2, 89},
    {20, 2, 90},
    {20, 2, 91},
    {20, 2, 92},
    {20, 2, 93},
    {20, 2, 94},
    {20, 2, 95},
    {20, 2, 96},
    {20, 2, 97},
    {20, 2, 98},
    {20, 2, 99},
    {20, 2, 0},
    {25, 3, 0},
    {25, 3, 1},
    {25, 3, 2},
    {25, 3, 3},
    {25, 3, 4},
    {25, 3, 5},
    {25, 3, 6},
    {25, 3, 7},
    {25, 3, 8},
    {25, 3, 9},
    {25, 3, 10},
    {25, 3, 11},
    {25, 3, 12},
    {25, 3, 13},
    {25, 3, 14},
    {25, 3, 15},
    {25, 3, 16},
    {25, 3, 17},
    {25, 3, 18},
    {25, 3, 19},
    {25, 3, 20},
    {25, 3, 21},
    {25, 3, 22},
    {25, 3, 23},
    {25, 3, 24},
    {25, 3, 25},
    {25, 3, 26},
    {25, 3, 27},
    {25, 3, 28},
    {25, 3, 29},
    {25, 3, 30},
    {25, 3, 31},
    {25, 3, 32},
    {25, 3, 33},
    {25, 3, 34},
    {25, 3, 35},
    {25, 3, 36},
    {25, 3, 37},
    {25, 3, 38},
    {25, 3, 39},
    {25, 3, 40},
    {25, 3, 41},
    {25, 3, 42},
    {25, 3, 43},
    {25, 3, 44},
    {25, 3, 45},
    {25, 3, 46},
    {25, 3, 47},
    {25, 3, 48},
    {25, 3, 49},
    {25, 3, 50},
    {25, 3, 51},
    {25, 3, 52},
    {25, 3, 53},
    {25, 3, 54},
    {25, 3, 55},
    {25, 3, 56},
    {25, 3, 57},
    {25, 3, 58},
    {25, 3, 59},
    {25, 3, 60},
    {25, 3, 61},
    {25, 3, 62},
    {25, 3, 63},
    {25, 3, 64},
    {25, 3, 65},
    {25, 3, 66},
    {25, 3, 67},
    {25, 3, 68},
    {25, 3, 69},
    {25, 3, 70},
    {25, 3, 71},
    {25, 3, 72},
    {25, 3, 73},
    {25, 3, 74},
    {25, 3, 75},
    {25, 3, 76},
    {25, 3, 77},
    {25, 3, 78},
    {25, 3, 79},
    {25, 3, 80},
    {25, 3, 81},
    {25, 3, 82},
    {25, 3, 83},
    {25, 3, 84},
    {25, 3, 85},
    {25, 3, 86},
    {25, 3, 87},
    {25, 3, 88},
    {25, 3, 89},
    {25, 3, 90},
    {25, 3, 91},
    {25, 3, 92},
    {25, 3, 93},
    {25, 3, 94},
    {25, 3, 95},
    {25, 3, 96},
    {25, 3, 97},
    {25, 3, 98},
    {25, 3, 99},
    {25, 3, 0},
    {30, 4, 0},
    {30, 4, 1},
    {30, 4, 2},
    {30, 4, 3},
    {30, 4, 4},
    {30, 4, 5},
    {30, 4, 6},
    {30, 4, 7},
    {30, 4, 8},
    {30, 4, 9},
    {30, 4, 10},
    {30, 4, 11},
    {30, 4, 12},
    {30, 4, 13},
    {30, 4, 14},
    {30, 4, 15},
    {30, 4, 16},
    {30, 4, 17},
    {30, 4, 18},
    {30, 4, 19},
    {30, 4, 20},
    {30, 4, 21},
    {30, 4, 22},
    {30, 4, 23},
    {30, 4, 24},
    {30, 4, 25},
    {30, 4, 26},
    {30, 4, 27},
    {30, 4, 28},
    {30, 4, 29},
    {30, 4, 30},
    {30, 4, 31},
    {30, 4, 32},
    {30, 4, 33},
    {30, 4, 34},
    {30, 4, 35},
    {30, 4, 36},
    {30, 4, 37},
    {30, 4, 38},
    {30, 4, 39},
    {30, 4, 40},
    {30, 4, 41},
    {30, 4, 42},
    {30, 4, 43},
    {30, 4, 44},
    {30, 4, 45},
    {30, 4, 46},
    {30, 4, 47},
    {30, 4, 48},
    {30, 4, 49},
    {30, 4, 50},
    {30, 4, 51},
    {30, 4, 52},
    {30, 4, 53},
    {30, 4, 54},
    {30, 4, 55},
    {30, 4, 56},
    {30, 4, 57},
    {30, 4, 58},
    {30, 4, 59},
    {30, 4, 60},
    {30, 4, 61},
    {30, 4, 62},
    {30, 4, 63},
    {30, 4, 64},
    {30, 4, 65},
    {30, 4, 66},
    {30, 4, 67},
    {30, 4, 68},
    {30, 4, 69},
    {30, 4, 70},
    {30, 4, 71},
    {30, 4, 72},
    {30, 4, 73},
    {30, 4, 74},
    {30, 4, 75},
    {30, 4, 76},
    {30, 4, 77},
    {30, 4, 78},
    {30, 4, 79},
    {30, 4, 80},
    {30, 4, 81},
    {30, 4, 82},
    {30, 4, 83},
    {30, 4, 84},
    {30, 4, 85},
    {30, 4, 86},
    {30, 4, 87},
    {30, 4, 88},
    {30, 4, 89},
    {30, 4, 90},
    {30, 4, 91},
    {30, 4, 92},
    {30, 4, 93},
    {30, 4, 94},
    {30, 4, 95},
    {30, 4, 96},
    {30, 4, 97},
    {30, 4, 98},
    {30, 4, 99},
    {30, 4, 0},
    {35, 5, 0},
    {35, 5, 1},
    {35, 5, 2},
    {35, 5, 3},
    {35, 5, 4},
    {35, 5, 5},
    {35, 5, 6},
    {35, 5, 7},
    {35, 5, 8},
    {35, 5, 9},
    {35, 5, 10},
    {35, 5, 11},
    {35, 5, 12},
    {35, 5, 13},
    {35, 5, 14},
    {35, 5, 15},
    {35, 5, 16},
    {35, 5, 17},
    {35, 5, 18},
    {35, 5, 19},
    {35, 5, 20},
    {35, 5, 21},
    {35, 5, 22},
    {35, 5, 23},
    {35, 5, 24},
    {35, 5, 25},
    {35, 5, 26},
    {35, 5, 27},
    {35, 5, 28},
    {35, 5, 29},
    {35, 5, 30},
    {35, 5, 31},
    {35, 5, 32},
    {35, 5, 33},
    {35, 5, 34},
    {35, 5, 35},
    {35, 5, 36},
    {35, 5, 37},
    {35, 5, 38},
    {35, 5, 39},
    {35, 5, 40},
    {35, 5, 41},
    {35, 5, 42},
    {35, 5, 43},
    {35, 5, 44},
    {35, 5, 45},
    {35, 5, 46},
    {35, 5, 47},
    {35, 5, 48},
    {35, 5, 49},
    {35, 5, 50},
    {35, 5, 51},
    {35, 5, 52},
    {35, 5, 53},
    {35, 5, 54},
    {35, 5, 55},
    {35, 5, 56},
    {35, 5, 57},
    {35, 5, 58},
    {35, 5, 59},
    {35, 5, 60},
    {35, 5, 61},
    {35, 5, 62},
    {35, 5, 63},
    {35, 5, 64},
    {35, 5, 65},
    {35, 5, 66},
    {35, 5, 67},
    {35, 5, 68},
    {35, 5, 69},
    {35, 5, 70},
    {35, 5, 71},
    {35, 5, 72},
    {35, 5, 73},
    {35, 5, 74},
    {35, 5, 75},
    {35, 5, 76},
    {35, 5, 77},
    {35, 5, 78},
    {35, 5, 79},
    {35, 5, 80},
    {35, 5, 81},
    {35, 5, 82},
    {35, 5, 83},
    {35, 5, 84},
    {35, 5, 85},
    {35, 5, 86},
    {35, 5, 87},
    {35, 5, 88},
    {35, 5, 89},
    {35, 5, 90},
    {35, 5, 91},
    {35, 5, 92},
    {35, 5, 93},
    {35, 5, 94},
    {35, 5, 95},
    {35, 5, 96},
    {35, 5, 97},
    {35, 5, 98},
    {35, 5, 99},
    {35, 5, 0},
    {40, 6, 0},
    {40, 6, 1},
    {40, 6, 2},
    {40, 6, 3},
    {40, 6, 4},
    {40, 6, 5},
    {40, 6, 6},
    {40, 6, 7},
    {40, 6, 8},
    {40, 6, 9},
    {40, 6, 10},
    {40, 6, 11},
    {40, 6, 12},
    {40, 6, 13},
    {40, 6, 14},
    {40, 6, 15},
    {40, 6, 16},
    {40, 6, 17},
    {40, 6, 18},
    {40, 6, 19},
    {40, 6, 20},
    {40, 6, 21},
    {40, 6, 22},
    {40, 6, 23},
    {40, 6, 24},
    {40, 6, 25},
    {40, 6, 26},
    {40, 6, 27},
    {40, 6, 28},
    {40, 6, 29},
    {40, 6, 30},
    {40, 6, 31},
    {40, 6, 32},
    {40, 6, 33},
    {40, 6, 34},
    {40, 6, 35},
    {40, 6, 36},
    {40, 6, 37},
    {40, 6, 38},
    {40, 6, 39},
    {40, 6, 40},
    {40, 6, 41},
    {40, 6, 42},
    {40, 6, 43},
    {40, 6, 44},
    {40, 6, 45},
    {40, 6, 46},
    {40, 6, 47},
    {40, 6, 48},
    {40, 6, 49},
    {40, 6, 50},
    {40, 6, 51},
    {40, 6, 52},
    {40, 6, 53},
    {40, 6, 54},
    {40, 6, 55},
    {40, 6, 56},
    {40, 6, 57},
    {40, 6, 58},
    {40, 6, 59},
    {40, 6, 60},
    {40, 6, 61},
    {40, 6, 62},
    {40, 6, 63},
    {40, 6, 64},
    {40, 6, 65},
    {40, 6, 66},
    {40, 6, 67},
    {40, 6, 68},
    {40, 6, 69},
    {40, 6, 70},
    {40, 6, 71},
    {40, 6, 72},
    {40, 6, 73},
    {40, 6, 74},
    {40, 6, 75},
    {40, 6, 76},
    {40, 6, 77},
    {40, 6, 78},
    {40, 6, 79},
    {40, 6, 80},
    {40, 6, 81},
    {40, 6, 82},
    {40, 6, 83},
    {40, 6, 84},
    {40, 6, 85},
    {40, 6, 86},
    {40, 6, 87},
    {40, 6, 88},
    {40, 6, 89},
    {40, 6, 90},
    {40, 6, 91},
    {40, 6, 92},
    {40, 6, 93},
    {40, 6, 94},
    {40, 6, 95},
    {40, 6, 96},
    {40, 6, 97},
    {40, 6, 98},
    {40, 6, 99},
    {40, 6, 0},
{UINT32_MAX, 0, 0} //END of programme
};

struct Action actions_use[] = {
    {30, 0, 0},
    {30, 1, 0},
    {30, 2, 40},
    {30, 3, 25},
    {30, 4, 15},
    {30, 5, 5},
    {30, 6, 4},
    {330, 0, 0},
    {330, 1, 0},
    {330, 2, 0},
    {330, 3, 0},
    {330, 4, 0},
    {330, 5, 0},
    {330, 6, 0},
    {390, 0, 0},
    {390, 1, 0},
    {390, 2, 40},
    {390, 3, 25},
    {390, 4, 15},
    {390, 5, 5},
    {390, 6, 4},
    {690, 0, 0},
    {690, 1, 0},
    {690, 2, 0},
    {690, 3, 0},
    {690, 4, 0},
    {690, 5, 0},
    {690, 6, 0},
    {750, 0, 0},
    {750, 1, 0},
    {750, 2, 40},
    {750, 3, 25},
    {750, 4, 15},
    {750, 5, 5},
    {750, 6, 4},
    {1050, 0, 0},
    {1050, 1, 0},
    {1050, 2, 0},
    {1050, 3, 0},
    {1050, 4, 0},
    {1050, 5, 0},
    {1050, 6, 0},
    {1110, 0, 0},
    {1110, 1, 0},
    {1110, 2, 40},
    {1110, 3, 25},
    {1110, 4, 15},
    {1110, 5, 5},
    {1110, 6, 4},
    {1410, 0, 0},
    {1410, 1, 0},
    {1410, 2, 0},
    {1410, 3, 0},
    {1410, 4, 0},
    {1410, 5, 0},
    {1410, 6, 0},
    {UINT32_MAX, 0, 0} //END of programme
};

struct Action actions[] = {
    {0, 0, 0},
    {3, 0, 0},
    {3, 0, 1},
    {6, 0, 0},
    {6, 0, 2},
    {9, 0, 0},
    {9, 0, 3},
    {12, 0, 0},
    {12, 0, 4},
    {15, 0, 0},
    {15, 0, 5},
    {18, 0, 0},
    {18, 0, 6},
    {21, 0, 0},
    {21, 0, 7},
    {24, 0, 0},
    {24, 0, 8},
    {27, 0, 0},
    {27, 0, 9},
    {30, 0, 0},
    {30, 0, 10},
    {33, 0, 0},
    {33, 0, 11},
    {36, 0, 0},
    {36, 0, 12},
    {39, 0, 0},
    {39, 0, 13},
    {42, 0, 0},
    {42, 0, 14},
    {45, 0, 0},
    {45, 0, 15},
    {48, 0, 0},
    {48, 0, 16},
    {51, 0, 0},
    {51, 0, 17},
    {54, 0, 0},
    {54, 0, 18},
    {57, 0, 0},
    {57, 0, 19},
    {60, 0, 0},
    {60, 0, 20},
    {63, 0, 0},
    {63, 0, 21},
    {66, 0, 0},
    {66, 0, 22},
    {69, 0, 0},
    {69, 0, 23},
    {72, 0, 0},
    {72, 0, 24},
    {75, 0, 0},
    {75, 0, 25},
    {78, 0, 0},
    {78, 0, 26},
    {81, 0, 0},
    {81, 0, 27},
    {84, 0, 0},
    {84, 0, 28},
    {87, 0, 0},
    {87, 0, 29},
    {90, 0, 0},
    {90, 0, 30},
    {93, 0, 0},
    {93, 0, 31},
    {96, 0, 0},
    {96, 0, 32},
    {99, 0, 0},
    {99, 0, 33},
    {102, 0, 0},
    {102, 0, 34},
    {105, 0, 0},
    {105, 0, 35},
    {108, 0, 0},
    {108, 0, 36},
    {111, 0, 0},
    {111, 0, 37},
    {114, 0, 0},
    {114, 0, 38},
    {117, 0, 0},
    {117, 0, 39},
    {120, 0, 0},
    {120, 0, 40},
    {123, 0, 0},
{UINT32_MAX, 0, 0} //END of programme
};

void toggle_status_led()
{
  if (status_pin)
    digitalWrite(STATUS_PIN, LOW);
  else
    digitalWrite(STATUS_PIN, HIGH);

  status_pin = !status_pin;
}

void set_channel_slow(uint8_t channel, double intensity)
{
  analogWrite(pwm_pins[channel], (int) intensity/100.0*255);
}

double read_channel_current(uint8_t channel)
{
  return read_channel_current(channel, 4000);
}

double read_channel_current(uint8_t channel, unsigned long count)
{
  //configure the mux
  
  digitalWrite(13, (channel & 1 == 1 ) ? HIGH : LOW); //LSB
  digitalWrite(12, ((channel >> 1) & 1 == 1) ? HIGH : LOW);
  digitalWrite(11, ((channel >> 2) & 1 == 1) ? HIGH : LOW);

  delay(1);

  unsigned long sum = 0;

  for (int i = 0; i<count; i++)
  {
    sum += analogRead(26);
  }

  return sum/count;// * 3300/count / ( (1 << 12) - 1);
}

void set_channel(uint8_t channel, double intensity)
{
  if (intensity < 0.1)
    intensity = 0; //correct double issues

  PWM_Instance[channel]->setPWM(pwm_pins[channel], FREQUENCY, intensity, false);
  PWM_Instance[channel]->enablePWM();
}

bool print_all_temps()
{
  bool overheat = false;
  float temp;
  for (int i = 0; i<7; i++)
  {
    /**
     * This doesn't work. It make no sense. Passing it to print works, storing it in a variable doesnt
     * To make it more fun, it works the first time the function gets called. On later calls it keeps printing 
     * the first temperature from the first sensor. WTF 
     */ 
    //temp = temperature_sensors[i]->readTemperatureC();
    Serial.print(temperature_sensors[i]->readTemperatureC());
    Serial.print(" ");

//  seems the pi god is against overheat protection (see above)
//    if (overheat || temp > 100)
//      overheat = true;
  }

  return overheat;
}

void setup_fast_pwm()
{
  Serial.println("Setting up PWM");
  for (int i=0; i < N_PWM_PINS; i++)
  {
    pinMode(pwm_pins[i], OUTPUT);
    PWM_Instance[i] = new RP2040_PWM(pwm_pins[i], FREQUENCY, 0);
    set_channel(i, 0);
  }
}


void current_measurement_counts()
{
  set_channel(0, 10);
  Serial.println("#Intensity 10%\n");
  for(long l=1; l<2000; l+=20)
  {
    Serial.print(millis());
    Serial.print(" ");
    Serial.print(l);
    Serial.print(" ");
    for (long i=0; i<1000; i++)
    {
      Serial.print(read_channel_current(0, l));
      Serial.print(" ");
    }
    Serial.print(millis());

    Serial.println();
  }
  set_channel(0, 0);
}

void setup()
{
  Serial.begin(115200);
  while(!Serial);
  arduino::MbedI2C temperature_wire(p20, p21);
  temperature_wire.begin();
  analogReadResolution(12);
  Serial.println("#Init serial");
  Serial.println("#Intialising temperature sensors");
  for (uint8_t i = 0; i<7; i++)
  {
    Serial.println("#Initialising sensor");
    temperature_sensors[i] = new Generic_LM75(&temperature_wire, 0x48+i);
  }
  setup_fast_pwm();
  //current_measurement_counts();
  //return;
  print_all_temps();
  Serial.println("#Setup done");
  Serial.print("#Running program on ");
  Serial.println(BOARDID);
  Serial.println("time T1 T2 T3 T4 T5 T6 Tcore C1 C2 C3 C4 C5 C6 time");
  start_time = millis();

  pinMode(STATUS_PIN, OUTPUT);

  //fast flash indicates programme start
  for (int i = 0; i<10; i++)
  {
    toggle_status_led();
    delay(100);
  }
}

double duty = 0;
int8_t dir = 1;
double step = 0.1;


void loop()
{
  //Serial.print("");
  Serial.print(millis());
  Serial.print(" ");
  if (print_all_temps())
  {
    Serial.println("#OVERHEAT DETECTED, HEATING DISABLED UNTIL RESET!");
    heat_disabled = true;
    set_channel(6, 0);
  }

  for (int i = 0; i<N_PWM_PINS; i++)
  {
    Serial.print(read_channel_current(i));
    Serial.print(" ");
  }

  Serial.println(millis());
  //return;
  while (actions[current_action].time < (millis() - start_time)/1000)
  {
    toggle_status_led();
    if (actions[current_action].channel == 6 && heat_disabled)
    {
      Serial.println("#HEATING DISABLED");
      current_action++;
    }

    set_channel(actions[current_action].channel, actions[current_action].intensity);
    Serial.print("#");
    Serial.print(millis());
    Serial.print(" channel: ");
    Serial.print(actions[current_action].channel);
    Serial.print(" intensity: ");
    Serial.print(actions[current_action].intensity);
    Serial.print(" ");
    Serial.print(" current: ");
    Serial.println(read_channel_current(actions[current_action].channel));
    current_action++;
    toggle_status_led();//fast flash LED [might not be visible]
  }
  if (actions[current_action].time != UINT32_MAX)
    toggle_status_led();
  //delay(100);
}